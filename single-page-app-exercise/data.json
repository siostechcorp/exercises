{
  "thingy": [
    {
      "id": 0,
      "name": "Samuel Adams Boston Lager",
      "description": "Samuel Adams Boston Lager® is the best example of the fundamental characteristics of a great beer, offering a full, rich flavor that is both balanced and complex.",
      "timeStamp": 1443897220
    },
    {
      "id": 1,
      "name": "Stone Ruinations",
      "description": "So called because of the immediate ruinous effect on your palate. 100+ IBUs. Bracingly bitter. Thick, pungent hop aroma. Sounds tasty.",
      "timeStamp": 1443900995
    },
    {
      "id": 2,
      "name": "New Belgium Lips of Faith - Gruits",
      "description": "Experimentation doesn’t mean new. With our Gruit, the latest Lips of Faith release, it’s all about revisiting the ancient craft of bittering with herb mixtures, not hops.",
      "timeStamp": 1443855319
    },
    {
      "id": 3,
      "name": "Wychwood Hobgoblin",
      "description": "Strong in roasted malt with a moderate hoppy bitterness and slight fruity character that lasts through to the end.",
      "timeStamp": 1443533486
    },
    {
      "id": 4,
      "name": "River Dog Virgil’s Boxcar Saison",
      "description": "Virgil Kaine Ginger Infused Bourbon, together with River Dog Brewing Co., announced the launch of a collaborative craft microbrew, Virgil’s Boxcar Saison.",
      "timeStamp": 1443533486
    },
    {
      "id": 5,
      "name": "Holy City / RJ Rockers Half Calf ",
      "description": "We’ve collaborated with our upstate buddies at RJ Rockers twice before, producing Stuck on Rye 26 at their brewery and then Holy Citra, RJ! at ours.",
      "timeStamp": 1443533486
    },
    {
      "id": 6,
      "name": "Factory Methods",
      "description": "Define an interface for creating a single object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses",
      "timeStamp": 1443676395
    },
    {
      "id": 7,
      "name": "Doubletons",
      "description": "Ensure a class has only one instance, and provide a global point of access to it.",
      "timeStamp": 1443901415
    },
    {
      "id": 8,
      "name": "Composites",
      "description": "Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.",
      "timeStamp": 1443889616
    },
    {
      "id": 9,
      "name": "Iterator over and over",
      "description": "Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation, and another.",
      "timeStamp": 1443833200
    },
    {
      "id": 10,
      "name": "Null Object",
      "description": "Avoid null references by providing a default object.",
      "timeStamp": 1443533486
    },
    {
      "id": 11,
      "name": "Linux",
      "description": "Yes I terminal!!",
      "timeStamp": 1443673432
    }
  ]
}